#pragma checksum "D:\work\school\Modules\CSC\task8Try\task8Try\Views\Home\Index.cshtml" "{ff1816ec-aa5e-4d10-87f7-6f4963833460}" "0e573c4ad7d02e0702ec2b746a82f60e276cda57"
// <auto-generated/>
#pragma warning disable 1591
[assembly: global::Microsoft.AspNetCore.Razor.Hosting.RazorCompiledItemAttribute(typeof(AspNetCore.Views_Home_Index), @"mvc.1.0.view", @"/Views/Home/Index.cshtml")]
namespace AspNetCore
{
    #line hidden
    using System;
    using System.Collections.Generic;
    using System.Linq;
    using System.Threading.Tasks;
    using Microsoft.AspNetCore.Mvc;
    using Microsoft.AspNetCore.Mvc.Rendering;
    using Microsoft.AspNetCore.Mvc.ViewFeatures;
#nullable restore
#line 1 "D:\work\school\Modules\CSC\task8Try\task8Try\Views\_ViewImports.cshtml"
using task8Try;

#line default
#line hidden
#nullable disable
#nullable restore
#line 2 "D:\work\school\Modules\CSC\task8Try\task8Try\Views\_ViewImports.cshtml"
using task8Try.Models;

#line default
#line hidden
#nullable disable
    [global::Microsoft.AspNetCore.Razor.Hosting.RazorSourceChecksumAttribute(@"SHA1", @"0e573c4ad7d02e0702ec2b746a82f60e276cda57", @"/Views/Home/Index.cshtml")]
    [global::Microsoft.AspNetCore.Razor.Hosting.RazorSourceChecksumAttribute(@"SHA1", @"7ee753a26b258a7062041ed65ee6aa278d804e2d", @"/Views/_ViewImports.cshtml")]
    public class Views_Home_Index : global::Microsoft.AspNetCore.Mvc.Razor.RazorPage<dynamic>
    {
        #pragma warning disable 1998
        public async override global::System.Threading.Tasks.Task ExecuteAsync()
        {
            WriteLiteral(@"<div>
    <h1> Upload Image</h1>
</div>

<div>
    <div class=""col-sm-8"">
        <div>
            <input id=""inp"" type='file'>
            <img id=""img"" height=""150"">
            <br />
            <button id=""toClarifai"">Predict</button>
        </div>
    </div>
</div>

<hr />

<div>
    <h4>Whether is it a receipt: </h4>
    <label id=""try""></label>
</div>

<hr />

<h1>Read text from image:</h1>
Enter the URL to an image of text, then click
the <strong>Read image</strong> button.


Image to read:
<input type=""text"" name=""inputImage"" id=""inputImage""
       value=""http://bucket-test232.s3.amazonaws.com/tester/test1/5c43798f9d036.image.jpg"" />
<button onclick=""processImage()"">Read image</button>
<br><br>
<div id=""wrapper"" style=""width:1020px; display:table;"">
    <div id=""jsonOutput"" style=""width:600px; display:table-cell;"">
        Response:
        <br><br>
        <textarea id=""responseTextArea"" class=""UIInput""
                  style=""width:580px; height:400px;""></");
            WriteLiteral(@"textarea>
    </div>
    <div id=""imageDiv"" style=""width:420px; display:table-cell;"">
        Source image:
        <br><br>
        <img id=""sourceImage"" width=""400"" />
    </div>
</div>


<script type=""text/javascript"" src=""https://sdk.clarifai.com/js/clarifai-latest.js"">

    const Clarifai = require('clarifai');

</script>

<script src=""http://ajax.googleapis.com/ajax/libs/jquery/1.7.1/jquery.min.js"" type=""text/javascript""></script>

<script>
    //Initialise App
    const app = new Clarifai.App({

        apiKey: '149f3048691843138eda29f3df8bde26'
    });



    var x = document.getElementById(""try"");






    function readFile() {



        if (this.files && this.files[0]) {



            var FR = new FileReader();



            FR.addEventListener(""load"", function (e) {
                document.getElementById(""img"").src = e.target.result;



                console.dir(e.target.result);
                let image = e.target.result;
               ");
            WriteLiteral(@" image = image.replace(""data:image/jpeg;base64,"", """")




                app.models.predict({ id: 'task8model', version: ""faffbd8bd4524a2d840ff74268db2325"" }, { base64: image }).then(
                    function (response) {
                        var concepts = response['outputs'][0]['data']['concepts']
                        console.dir(concepts[0].value.toFixed(20));
                        x.innerHTML = concepts[0].value.toFixed(18) + '%' + ' This is a receipt.';
                    },
                    function (err) {
                        // there was an error
                        console.dir(err);
                        x.innerHTML = ' This is not a receipt.';
                    }
                );
            });



            FR.readAsDataURL(this.files[0]);
            console.dir(FR);



        }



    }



    document.getElementById(""inp"").addEventListener(""change"", readFile);





</script>


");
            WriteLiteral(@"<script type=""text/javascript"">
    function processImage() {
        // **********************************************
        // *** Update or verify the following values. ***
        // **********************************************

        let subscriptionKey = ""edfcd55b8c6848a6ab00b3de325628e9"";
        let endpoint = ""https://task8.cognitiveservices.azure.com/"";
        if (!subscriptionKey) { throw new Error('Please enter your subscription key and endpoint.'); }

        var uriBase = endpoint + ""/vision/v3.0/read/analyze"";

        // Display the image.
        var sourceImageUrl = document.getElementById(""inputImage"").value;
        document.querySelector(""#sourceImage"").src = sourceImageUrl;


        // This operation requires two REST API calls. One to submit the image
        // for processing, the other to retrieve the text found in the image.
        //
        // Make the first REST API call to submit the image for processing.
        $.ajax({
            url: uriBase,
");
            WriteLiteral(@"
            // Request headers.
            beforeSend: function (jqXHR) {
                jqXHR.setRequestHeader(""Content-Type"", ""application/json"");
                jqXHR.setRequestHeader(""Ocp-Apim-Subscription-Key"", subscriptionKey);
            },

            type: ""POST"",

            // Request body.
            data: JSON.stringify({ url: sourceImageUrl }),
        })

            .done(function (data, textStatus, jqXHR) {
                // Show progress.
                $(""#responseTextArea"").val(""Text submitted. "" +
                    ""Waiting 10 seconds to retrieve the recognized text."");

                // Note: The response may not be immediately available. Text
                // recognition is an asynchronous operation that can take a variable
                // amount of time depending on the length of the text you want to
                // recognize. You may need to wait or retry the GET operation.
                //
                // Wait ten seconds before makin");
            WriteLiteral(@"g the second REST API call.
                setTimeout(function () {
                    // ""Operation-Location"" in the response contains the URI
                    // to retrieve the recognized text.
                    var operationLocation = jqXHR.getResponseHeader(""Operation-Location"");

                    // Make the second REST API call and get the response.
                    $.ajax({
                        url: operationLocation,

                        // Request headers.
                        beforeSend: function (jqXHR) {
                            jqXHR.setRequestHeader(""Content-Type"", ""application/json"");
                            jqXHR.setRequestHeader(
                                ""Ocp-Apim-Subscription-Key"", subscriptionKey);
                        },

                        type: ""GET"",
                    })

                        .done(function (data) {
                            // Show formatted JSON on webpage.
                            var displ");
            WriteLiteral(@"ay = data.analyzeResult.readResults[0].lines;
                            var myStringArray = data.analyzeResult.readResults[0].lines;
                            var length = data.analyzeResult.readResults[0].lines.length;
                            console.dir(length);
                            var toBeDisplayed = """";
                            for (var i = 0; i < length; i++) {
                                //console.dir(myStringArray[i].text);
                                toBeDisplayed += myStringArray[i].text + "" \r\n  "";
                                //Do something
                            }
                            console.dir(display);
                            console.dir(toBeDisplayed);
                            //$(""#responseTextArea"").val(JSON.stringify(data, null, 2));
                            $(""#responseTextArea"").val(toBeDisplayed);
                        })

                        .fail(function (jqXHR, textStatus, errorThrown) {
                    ");
            WriteLiteral(@"        // Display error message.
                            var errorString = (errorThrown === """") ? ""Error. "" :
                                errorThrown + "" ("" + jqXHR.status + ""): "";
                            errorString += (jqXHR.responseText === """") ? """" :
                                (jQuery.parseJSON(jqXHR.responseText).message) ?
                                    jQuery.parseJSON(jqXHR.responseText).message :
                                    jQuery.parseJSON(jqXHR.responseText).error.message;
                            alert(errorString);
                        });
                }, 10000);
            })

            .fail(function (jqXHR, textStatus, errorThrown) {
                // Put the JSON description into the text area.
                $(""#responseTextArea"").val(JSON.stringify(jqXHR, null, 2));

                // Display error message.
                var errorString = (errorThrown === """") ? ""Error. "" :
                    errorThrown + "" ("" + jqXHR.status");
            WriteLiteral(@" + ""): "";
                errorString += (jqXHR.responseText === """") ? """" :
                    (jQuery.parseJSON(jqXHR.responseText).message) ?
                        jQuery.parseJSON(jqXHR.responseText).message :
                        jQuery.parseJSON(jqXHR.responseText).error.message;
                alert(errorString);
            });
    };
</script>");
        }
        #pragma warning restore 1998
        [global::Microsoft.AspNetCore.Mvc.Razor.Internal.RazorInjectAttribute]
        public global::Microsoft.AspNetCore.Mvc.ViewFeatures.IModelExpressionProvider ModelExpressionProvider { get; private set; }
        [global::Microsoft.AspNetCore.Mvc.Razor.Internal.RazorInjectAttribute]
        public global::Microsoft.AspNetCore.Mvc.IUrlHelper Url { get; private set; }
        [global::Microsoft.AspNetCore.Mvc.Razor.Internal.RazorInjectAttribute]
        public global::Microsoft.AspNetCore.Mvc.IViewComponentHelper Component { get; private set; }
        [global::Microsoft.AspNetCore.Mvc.Razor.Internal.RazorInjectAttribute]
        public global::Microsoft.AspNetCore.Mvc.Rendering.IJsonHelper Json { get; private set; }
        [global::Microsoft.AspNetCore.Mvc.Razor.Internal.RazorInjectAttribute]
        public global::Microsoft.AspNetCore.Mvc.Rendering.IHtmlHelper<dynamic> Html { get; private set; }
    }
}
#pragma warning restore 1591
